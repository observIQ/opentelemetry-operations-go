package httpclient

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MonitoredResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "labels":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Labels")
				return
			}
			if z.Labels == nil {
				z.Labels = make(map[string]string, zb0002)
			} else if len(z.Labels) > 0 {
				for key := range z.Labels {
					delete(z.Labels, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Labels")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Labels", za0001)
					return
				}
				z.Labels[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MonitoredResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "type"
	err = en.Append(0x82, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "labels"
	err = en.Append(0xa6, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Labels)))
	if err != nil {
		err = msgp.WrapError(err, "Labels")
		return
	}
	for za0001, za0002 := range z.Labels {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Labels")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MonitoredResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "type"
	o = append(o, 0x82, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "labels"
	o = append(o, 0xa6, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Labels)))
	for za0001, za0002 := range z.Labels {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MonitoredResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "labels":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Labels")
				return
			}
			if z.Labels == nil {
				z.Labels = make(map[string]string, zb0002)
			} else if len(z.Labels) > 0 {
				for key := range z.Labels {
					delete(z.Labels, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Labels")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Labels", za0001)
					return
				}
				z.Labels[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MonitoredResource) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 7 + msgp.MapHeaderSize
	if z.Labels != nil {
		for za0001, za0002 := range z.Labels {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgPackEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "logName":
			z.LogName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LogName")
				return
			}
		case "resource":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Resource")
					return
				}
				z.Resource = nil
			} else {
				if z.Resource == nil {
					z.Resource = new(MonitoredResource)
				}
				err = z.Resource.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Resource")
					return
				}
			}
		case "textPayload":
			z.TestPayload, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TestPayload")
				return
			}
		case "timestamp":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				z.Timestamp = nil
			} else {
				if z.Timestamp == nil {
					z.Timestamp = new(Timestamp)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Timestamp")
						return
					}
					switch msgp.UnsafeString(field) {
					case "seconds":
						z.Timestamp.Seconds, err = dc.ReadInt64()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Seconds")
							return
						}
					case "nanos":
						z.Timestamp.Nanos, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Nanos")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp")
							return
						}
					}
				}
			}
		case "severity":
			z.Severity, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Severity")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgPackEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "logName"
	err = en.Append(0x85, 0xa7, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LogName)
	if err != nil {
		err = msgp.WrapError(err, "LogName")
		return
	}
	// write "resource"
	err = en.Append(0xa8, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	if err != nil {
		return
	}
	if z.Resource == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Resource.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Resource")
			return
		}
	}
	// write "textPayload"
	err = en.Append(0xab, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.TestPayload)
	if err != nil {
		err = msgp.WrapError(err, "TestPayload")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	if z.Timestamp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "seconds"
		err = en.Append(0x82, 0xa7, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Timestamp.Seconds)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp", "Seconds")
			return
		}
		// write "nanos"
		err = en.Append(0xa5, 0x6e, 0x61, 0x6e, 0x6f, 0x73)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.Timestamp.Nanos)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp", "Nanos")
			return
		}
	}
	// write "severity"
	err = en.Append(0xa8, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Severity)
	if err != nil {
		err = msgp.WrapError(err, "Severity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgPackEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "logName"
	o = append(o, 0x85, 0xa7, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LogName)
	// string "resource"
	o = append(o, 0xa8, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	if z.Resource == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Resource.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Resource")
			return
		}
	}
	// string "textPayload"
	o = append(o, 0xab, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendString(o, z.TestPayload)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if z.Timestamp == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "seconds"
		o = append(o, 0x82, 0xa7, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73)
		o = msgp.AppendInt64(o, z.Timestamp.Seconds)
		// string "nanos"
		o = append(o, 0xa5, 0x6e, 0x61, 0x6e, 0x6f, 0x73)
		o = msgp.AppendInt32(o, z.Timestamp.Nanos)
	}
	// string "severity"
	o = append(o, 0xa8, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79)
	o = msgp.AppendInt32(o, z.Severity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgPackEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "logName":
			z.LogName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LogName")
				return
			}
		case "resource":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Resource = nil
			} else {
				if z.Resource == nil {
					z.Resource = new(MonitoredResource)
				}
				bts, err = z.Resource.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Resource")
					return
				}
			}
		case "textPayload":
			z.TestPayload, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TestPayload")
				return
			}
		case "timestamp":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Timestamp = nil
			} else {
				if z.Timestamp == nil {
					z.Timestamp = new(Timestamp)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Timestamp")
						return
					}
					switch msgp.UnsafeString(field) {
					case "seconds":
						z.Timestamp.Seconds, bts, err = msgp.ReadInt64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Seconds")
							return
						}
					case "nanos":
						z.Timestamp.Nanos, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Nanos")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp")
							return
						}
					}
				}
			}
		case "severity":
			z.Severity, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Severity")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgPackEntry) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.LogName) + 9
	if z.Resource == nil {
		s += msgp.NilSize
	} else {
		s += z.Resource.Msgsize()
	}
	s += 12 + msgp.StringPrefixSize + len(z.TestPayload) + 10
	if z.Timestamp == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Int64Size + 6 + msgp.Int32Size
	}
	s += 9 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgPackPayload) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "entries":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Entries")
				return
			}
			if cap(z.Entries) >= int(zb0002) {
				z.Entries = (z.Entries)[:zb0002]
			} else {
				z.Entries = make([]*MsgPackEntry, zb0002)
			}
			for za0001 := range z.Entries {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Entries", za0001)
						return
					}
					z.Entries[za0001] = nil
				} else {
					if z.Entries[za0001] == nil {
						z.Entries[za0001] = new(MsgPackEntry)
					}
					err = z.Entries[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Entries", za0001)
						return
					}
				}
			}
		case "partialSuccess":
			z.PartialSuccess, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "PartialSuccess")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgPackPayload) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "entries"
	err = en.Append(0x82, 0xa7, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Entries)))
	if err != nil {
		err = msgp.WrapError(err, "Entries")
		return
	}
	for za0001 := range z.Entries {
		if z.Entries[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Entries[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Entries", za0001)
				return
			}
		}
	}
	// write "partialSuccess"
	err = en.Append(0xae, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.PartialSuccess)
	if err != nil {
		err = msgp.WrapError(err, "PartialSuccess")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgPackPayload) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "entries"
	o = append(o, 0x82, 0xa7, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Entries)))
	for za0001 := range z.Entries {
		if z.Entries[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Entries[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Entries", za0001)
				return
			}
		}
	}
	// string "partialSuccess"
	o = append(o, 0xae, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendBool(o, z.PartialSuccess)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgPackPayload) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "entries":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Entries")
				return
			}
			if cap(z.Entries) >= int(zb0002) {
				z.Entries = (z.Entries)[:zb0002]
			} else {
				z.Entries = make([]*MsgPackEntry, zb0002)
			}
			for za0001 := range z.Entries {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Entries[za0001] = nil
				} else {
					if z.Entries[za0001] == nil {
						z.Entries[za0001] = new(MsgPackEntry)
					}
					bts, err = z.Entries[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Entries", za0001)
						return
					}
				}
			}
		case "partialSuccess":
			z.PartialSuccess, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartialSuccess")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgPackPayload) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Entries {
		if z.Entries[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Entries[za0001].Msgsize()
		}
	}
	s += 15 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Timestamp) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "seconds":
			z.Seconds, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Seconds")
				return
			}
		case "nanos":
			z.Nanos, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Nanos")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Timestamp) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "seconds"
	err = en.Append(0x82, 0xa7, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Seconds)
	if err != nil {
		err = msgp.WrapError(err, "Seconds")
		return
	}
	// write "nanos"
	err = en.Append(0xa5, 0x6e, 0x61, 0x6e, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Nanos)
	if err != nil {
		err = msgp.WrapError(err, "Nanos")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Timestamp) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "seconds"
	o = append(o, 0x82, 0xa7, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73)
	o = msgp.AppendInt64(o, z.Seconds)
	// string "nanos"
	o = append(o, 0xa5, 0x6e, 0x61, 0x6e, 0x6f, 0x73)
	o = msgp.AppendInt32(o, z.Nanos)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Timestamp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "seconds":
			z.Seconds, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seconds")
				return
			}
		case "nanos":
			z.Nanos, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nanos")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Timestamp) Msgsize() (s int) {
	s = 1 + 8 + msgp.Int64Size + 6 + msgp.Int32Size
	return
}
